name: Build/Publish Docker Images and, optionally, Singularity Images on CVMFS


on:
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image name (e.g., ghcr.io/foo/bar)"
        required: true
      action:
        description: "One of: BUILD, CVMFS_BUILD, CVMFS_REMOVE, CVMFS_REMOVE_THEN_BUILD"
        required: true
      dockerhub_username:
        description: "(Optional) Docker Hub username"
        required: false
      dockerhub_token:
        description: "(Optional) Docker Hub token"
        required: false
      ghcr_token:
        description: "(Optional) GitHub Container Registry token"
        required: false
      gh_cvmfs_token:
        description: "(Optional) GitHub PAT for CVMFS"
        required: false
      cvmfs_dest_dir:
        description: "(Optional) CVMFS destination directory"
        required: false
      cvmfs_remove_tags:
        description: "(Optional) Tags to remove from CVMFS"
        required: false
      free_disk_space:
        description: "(Optional) Free space on runner before building"
        required: false
        default: "false"
      build_platform:
        description: "(Optional) Target platform"
        required: false
        default: "linux/amd64"


jobs:

  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Determine action steps
        run: |
          set -euo pipefail
          echo "DO_1_CVMFS_REMOVE=false" >> "$GITHUB_ENV"
          echo "DO_2_BUILD=false" >> "$GITHUB_ENV"
          echo "DO_3_CVMFS_BUILD=false" >> "$GITHUB_ENV"

          case "${{ inputs.action }}" in
            CVMFS_REMOVE|CVMFS_REMOVE_THEN_BUILD)
              echo "DO_1_CVMFS_REMOVE=true" >> "$GITHUB_ENV"
              ;;
          esac

          case "${{ inputs.action }}" in
            BUILD|CVMFS_BUILD|CVMFS_REMOVE_THEN_BUILD)
              echo "DO_2_BUILD=true" >> "$GITHUB_ENV"
              ;;
          esac

          case "${{ inputs.action }}" in
            CVMFS_BUILD|CVMFS_REMOVE_THEN_BUILD)
              echo "DO_3_CVMFS_BUILD=true" >> "$GITHUB_ENV"
              ;;
          esac

      - name: Validate image format
        run: |
          set -euo pipefail
          if [[ ! "${{ inputs.image }}" =~ ^[^/]+/[^/]+(/[^/]+)?$ ]]; then
            echo "::error::'image' must be in form 'namespace/image' or 'registry/namespace/image'"
            exit 1
          fi
          last_segment=$(basename "${{ inputs.image }}")
          if [[ "$last_segment" == *:* || "$last_segment" == *@* ]]; then
            echo "::error::'image' must not include a tag or digest"
            exit 1
          else
            echo "IMAGE_NAME=$last_segment" >> "$GITHUB_ENV"
          fi

      - name: Remove CVMFS images (if applicable)
        if: env.DO_1_CVMFS_REMOVE == 'true'
        run: |
          set -euo pipefail
          if [[ -z "${{ inputs.cvmfs_remove_tags }}" ]]; then
            echo "::error::cvmfs_remove_tags must be given"
            exit 1
          fi
          python -c '
          import os
          image_name = os.environ["IMAGE_NAME"]
          tags = """${{ inputs.cvmfs_remove_tags }}"""
          print("\n".join(f"{image_name}:{t.strip()}" for t in tags.splitlines() if t.strip()))
          ' > delete_image_nametags.txt
          echo "delete_image_nametags<<EOF" >> "$GITHUB_OUTPUT"
          cat delete_image_nametags.txt >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Run CVMFS removal action
        if: env.DO_1_CVMFS_REMOVE == 'true'
        uses: WIPACrepo/build-singularity-cvmfs-action@v2.0
        with:
          github_token: ${{ inputs.gh_cvmfs_token }}
          dest_dir: ${{ inputs.cvmfs_dest_dir }}
          delete_image_nametags: ${{ steps.remove.outputs.delete_image_nametags }}

      - name: Free disk space
        if: env.DO_2_BUILD == 'true' && inputs.free_disk_space == 'true'
        uses: jlumbroso/free-disk-space@main
        with:
          docker-images: false

      - name: Docker metadata
        if: env.DO_2_BUILD == 'true'
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ inputs.image }}
          tags: |
            type=sha,prefix={{branch}}-,enable=${{ github.ref_type == 'branch' }}
            type=semver,pattern={{major}},enable=${{ github.ref_type == 'tag' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.ref_type == 'tag' }}
            type=semver,pattern={{major}}.{{minor}}.{{patch}},enable=${{ github.ref_type == 'tag' }}

      - name: Docker login (DockerHub)
        if: env.DO_2_BUILD == 'true' && ! startsWith(inputs.image, 'ghcr.io/')
        uses: docker/login-action@v2
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ inputs.dockerhub_token }}

      - name: Docker login (GHCR)
        if: env.DO_2_BUILD == 'true' && startsWith(inputs.image, 'ghcr.io/')
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ inputs.ghcr_token }}

      - name: Setup QEMU
        if: env.DO_2_BUILD == 'true' && contains(inputs.build_platform, 'arm')
        uses: docker/setup-qemu-action@v2

      - name: Setup Buildx
        if: env.DO_2_BUILD == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Docker build and push
        if: env.DO_2_BUILD == 'true'
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ inputs.build_platform }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Build Singularity on CVMFS
        if: env.DO_3_CVMFS_BUILD == 'true'
        uses: WIPACrepo/build-singularity-cvmfs-action@v2.0
        with:
          github_token: ${{ inputs.gh_cvmfs_token }}
          dest_dir: ${{ inputs.cvmfs_dest_dir }}
          build_images: ${{ steps.docker_meta.outputs.tags }}
