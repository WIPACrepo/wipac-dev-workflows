name: "Tag and Release Project; Optionally: Build Python Package, Publish to PyPI"

on:
  workflow_call:
    inputs:
      project-type:
        description: "Project type (only 'python' triggers an automatic build here)"
        required: true
        type: string
      python-version:
        description: "Python version to use for build (only if project-type is 'python')"
        required: false
        type: string
      release-artifacts:
        description: |
          Optional: newline-separated list of artifact names to download and include in the GitHub release.
          Each artifact is downloaded and added to release using: release-artifacts/<name>/**/*
        required: false
        type: string
      publish-to-pypi:
        description: "If true and project-type is 'python', publish built package to PyPI"
        required: false
        type: boolean
        default: false
      version-style:
        description: |
          Your project's style of versioning. 
          Example: 'X.Y.Z' (default), 'X.Y' (no patch segment)
          FROM: https://github.com/WIPACrepo/wipac-dev-next-version-action
        required: false
        default: 'X.Y.Z'
        type: string
      ignore-paths:
        description: |
          Base newline-separated globs to ignore when determining the next version.
        required: false
        type: string
        default: |
          # Project meta / docs (ALL CAPS files)
          [A-Z]*.md
          [A-Z]*.rst
          [A-Z]*.txt
          LICENSE*
          COPYING*
          NOTICE*
          AUTHORS*
          CONTRIBUTORS*
          CHANGELOG*
          HISTORY*
          NEWS*
          README*
          CONTRIBUTING*
          CODE_OF_CONDUCT*
          SECURITY*
          SUPPORT*
          
          # Git / GitHub meta
          .github/*
          .gitattributes
          .mailmap
          .codeowners
          .git*  # .gitignore, etc.
          
          # Docs, examples, notebooks
          [Dd]ocs/*
          [Ee]xamples*/*
          [Rr]esources*/*
          [Tt]utorials/*
          [Nn]otebooks/*
          *.ipynb
          
          # Tests
          tests/*
          test/*
          testing/*
          pytest.ini
          tox.ini
          
          # Blanket: all hidden dotfiles and dot-dirs (root and nested)
          .*
          */.*
          
          # ...but force-unignore dockerignore files (root and nested, with variants)
          !.dockerignore
          !.dockerignore.*
          !*/.dockerignore
          !*/.dockerignore.*

      more-ignore-paths:
        description: |
          Extra newline-separated globs to append to `ignore-paths`.
          Useful for extending without duplicating defaults.
        required: false
        type: string
        default: ""
    secrets:
      TOKEN:
        required: false  # only required if you want to trigger workflows from the 'git tag'
      PYPI_TOKEN:
        required: false  # only required if 'publish-to-pypi' is true

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    concurrency: tag-and-release  # prevent any possible race conditions
    steps:
      - name: Validate inputs
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          
          # Check that project-type is only lowercase letters
          if [[ ! "${{ inputs.project-type }}" =~ ^[a-z]+(-[a-z]+)*$ ]]; then
            echo "::error::project-type must be only lowercase letters (a-z) with optional '-' in the middle."
            exit 1
          fi

          # PROJECT IS PYTHON
          if [[ "${{ inputs.project-type }}" == "python" ]]; then
            if [[ -z "${{ inputs.python-version }}" ]]; then
              echo "::error::python-version is required when project-type is 'python'."
              exit 1
            fi
            if [[ "${{ inputs.publish-to-pypi }}" == "true" && -z "${{ secrets.PYPI_TOKEN }}" ]]; then
              echo "::error::PYPI_TOKEN secret must be set when publish-to-pypi is true for Python projects."
              exit 1
            fi
          # PROJECT IS *NOT* PYTHON
          else
            if [[ -n "${{ inputs.python-version }}" ]]; then
              echo "::error::python-version must not be set when project-type is not 'python'."
              exit 1
            fi
            if [[ "${{ inputs.publish-to-pypi }}" == "true" ]]; then
              echo "::error::publish-to-pypi must not be true when project-type is not 'python'."
              exit 1
            fi
          fi

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to see tags and commits
          ref: ${{ github.ref }}  # dont lock to sha (action needs to push)
          token: ${{ secrets.TOKEN || github.token }}

      - name: Is this most recent commit?
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

          git fetch &> /dev/null
          if [[ $(git status -sb | grep behind) ]]; then
            echo "::error::This commit is not most recent on this branch -- rest of workflow will be skipped"
            exit 1
          fi

      # PYTHON ONLY: setup python
      - if: inputs.project-type == 'python'
        uses: actions/setup-python@v5  # needed for building Python project
        with:
          python-version: ${{ inputs.python-version }}

      - name: Finalize ignore-paths
        id: ignore-paths-finalized
        env:
          BASE: ${{ inputs.ignore-paths }}
          EXTRA: ${{ inputs.more-ignore-paths }}
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          
          python -c '
          import os

          def clean(lines: list[str]) -> list[str]:
              out: list[str] = []
              for raw in lines:
                  s = raw.strip()
                  if not s or s.startswith("#"):
                      continue
                  # drop simple inline comments like "pattern  # comment"
                  if " #" in s:
                      s = s.split(" #", 1)[0].rstrip()
                  if s:
                      out.append(s)
              return out

          base = clean(os.environ["BASE"].splitlines())
          extra = clean(os.environ["EXTRA"].splitlines())

          combined_str = "\n".join(base + extra)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
              f.write("value<<EOF\n")
              f.write(combined_str)
              f.write("\nEOF\n")
          '

      - name: Determine next version
        uses: WIPACrepo/wipac-dev-next-version-action@v1.5
        id: next-version
        with:
          force-patch-if-no-commit-token: true
          ignore-paths: ${{ steps.ignore-paths-finalized.outputs.value }}
          version-style: ${{ inputs.version-style }}

      - if: steps.next-version.outputs.version != ''
        name: Tag new version
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          git tag v${{ steps.next-version.outputs.version }}  # note: prepend 'v'
          git push origin --tags

      # PYTHON ONLY: auto-build
      - if: |
          steps.next-version.outputs.version != '' &&
          inputs.project-type == 'python'
        name: Build Python package
        uses: WIPACrepo/wipac-dev-py-build-action@v1.1
        # -> uses the most recent git tag for versioning (aka the one made above)
        # -> creates 'dist/' files

      - if: |
          steps.next-version.outputs.version != '' && 
          inputs.release-artifacts != ''
        name: Download extra artifacts
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          echo "${{ inputs.release-artifacts }}" | while read -r name; do
            echo "Downloading artifact: $name"
            mkdir -p "release-artifacts/$name"
            gh run download --name "$name" --dir "release-artifacts/$name" || echo "::warning::Artifact '$name' not found."
          done
        shell: bash

      - if: steps.next-version.outputs.version != ''
        name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next-version.outputs.version }}  # must match git tag above
          generate_release_notes: true
          files: |
            dist/*
            release-artifacts/**/*
          # note: OK if a file/glob does not exist (above)

      # PYTHON ONLY: publish to PyPI if explicitly requested
      - if: |
          steps.next-version.outputs.version != '' &&
          inputs.project-type == 'python' &&
          inputs.publish-to-pypi == true
        name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
