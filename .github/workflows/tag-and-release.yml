name: "Tag and Release Project; Optionally: Build Python Package, Publish to PyPI"

on:
  workflow_call:
    inputs:
      project-type:
        description: "Project type (only 'python' triggers an automatic build here)"
        required: true
        type: string
      python-version:
        description: "Python version to use for build (only if project-type is 'python')"
        required: false
        type: string
      release-artifacts:
        description: |
          Optional: newline-separated list of artifact names to download and include in the GitHub release.
          Each artifact is downloaded and added to release using: release-artifacts/<name>/**/*
        required: false
        type: string
      publish-to-pypi:
        description: "If true and project-type is 'python', publish built package to PyPI"
        required: false
        type: boolean
        default: false
    secrets:
      PYPI_TOKEN:
        required: false  # only required if 'publish-to-pypi' is true
      PERSONAL_ACCESS_TOKEN:
        required: true

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    concurrency: tag-and-release  # prevent any possible race conditions
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # required to see tags and commits
          ref: ${{ github.sha }}  # lock to triggered commit ('github.ref' is dynamic)

      # PYTHON ONLY: setup python
      - if: inputs.project-type == 'python'
        uses: actions/setup-python@v5  # needed for building Python project
        with:
          python-version: ${{ inputs.python-version }}

      - name: Determine next version
        uses: WIPACrepo/wipac-dev-next-version-action@v1.2
        id: next-version
        with:
          force-patch-if-no-commit-token: true
          ignore-paths: |
            **/README.md
            .github/**
            .gitignore
            dependencies-logs/**
            tests/**

      - if: steps.next-version.outputs.version != ''
        name: Tag new version
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          git tag v${{ steps.next-version.outputs.version }}  # note: prepend 'v'
          git push origin --tags

      # PYTHON ONLY: auto-build
      - if: |
          steps.next-version.outputs.version != '' &&
          inputs.project-type == 'python'
        name: Build Python package
        uses: WIPACrepo/wipac-dev-py-build-action@v1.1
        # -> uses the most recent git tag for versioning (aka the one made above)
        # -> creates 'dist/' files

      - if: |
          steps.next-version.outputs.version != '' && 
          inputs.release-artifacts != ''
        name: Download extra artifacts
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
          echo "${{ inputs.release-artifacts }}" | while read -r name; do
            echo "Downloading artifact: $name"
            mkdir -p "release-artifacts/$name"
            gh run download --name "$name" --dir "release-artifacts/$name" || echo "::warning::Artifact '$name' not found."
          done
        shell: bash

      - if: steps.next-version.outputs.version != ''
        name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.next-version.outputs.version }}  # must match git tag above
          generate_release_notes: true
          files: |
            dist/*
            release-artifacts/**/*
          # note: OK if a file/glob does not exist (above)

      # PYTHON ONLY: publish to PyPI if explicitly requested
      - if: |
          steps.next-version.outputs.version != '' &&
          inputs.project-type == 'python' &&
          inputs.publish-to-pypi == true
        name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
